import { NextRequest, NextResponse } from "next/server";
import { chatWithClaude } from "@/lib/claude-client";
import { detectRoleContext, getRoleAwareQuestion, getPhaseProgressionSignal, getChallengerInsight, analyzeMessage, checkClusterCompletion } from "@/lib/cluster-engine";
import { generateQuickResponseSuggestions } from "@/lib/quick-responses";
import { ROLE_COMPLETION_THRESHOLDS } from "@/lib/confidence";
import { analyzeUniversalQuality } from "@/lib/quality-analysis";

const SYSTEM_PROMPT = `Du √§r Recta ‚Äì en erfaren kollega som hj√§lper med rekryteringsbeslut genom naturlig konversation.

KRITISKA REGLER:
1. ST√ÑLL ALDRIG FLERA FR√ÖGOR SAMTIDIGT - endast EN fokuserad fr√•ga per svar
2. VARJE FR√ÖGA M√ÖSTE VARA BESVARBAR P√Ö 1-2 MENINGAR - undvik komplexa flerdelade fr√•gor
3. N√ÑR F√ñRTROENDE N√ÖR 85%+ - sluta st√§lla nya fr√•gor och fr√•ga om anv√§ndaren √§r redo f√∂r n√§sta fas
4. V√ÑNTA P√Ö ANV√ÑNDARENS BEKR√ÑFTELSE innan du g√•r vidare
5. ALDRIG inkludera fasnummer eller "FAS X:" i dina svar - bara ren konversation
6. BYGG F√ñRST√ÖELSE PROGRESSIVT - anv√§nd f√∂reg√•ende svar f√∂r att informera n√§sta fr√•ga

VIKTIGT: Om du st√§ller flera fr√•gor i samma meddelande bryter du mot reglerna. St√§ll ENDAST EN fr√•ga per svar.

EXEMPEL P√Ö KORREKT BETEENDE:
‚ùå FEL: "Vad orsakar f√∂rseningarna? Vad sa styrelsen?"
‚úÖ R√ÑTT: "Vad orsakar f√∂rseningarna i era finansiella rapporter?"

‚ùå FEL: "Hur mycket f√∂rsenade √§r rapporterna? Vilka konsekvenser har det?"
‚úÖ R√ÑTT: "Hur mycket f√∂rsenade √§r era finansiella rapporter vanligtvis?"

FASER:
1. Problem & Pain Point üéØ - Identifiera det specifika problemet
2. Impact & Urgency ‚ö° - Kvantifiera p√•verkan och br√•dskan  
3. Success Criteria ‚úÖ - Definiera framg√•ngskriterier
4. Resources & Budget üí∞ - S√§kerst√§ll resurser och budget
5. Organization & Culture üè¢ - Validera organisationsberedskap
6. Alternatives & Risks üîÑ - Utv√§rdera alternativ och risker

STRATEGISK FR√ÖGEST√ÑLLNING (SPIN + Challenger):
- Fokusera p√• KONFIDENTIELL information endast anv√§ndaren k√§nner till
- St√§ll fr√•gor om m√§nskliga dynamiker, politik, stakeholder-reaktioner
- F√• konkreta detaljer: namn, datum, belopp, beteenden
- Undvik generiska aff√§rsfr√•gor som kan besvaras genom marknadsforskning
- Utmana antaganden med insikter och perspektiv
- V√§gled anv√§ndaren att uppt√§cka dolda problem

FR√ÖGEKVALITETSKRITERIER:
1. EN fr√•ga per meddelande - flera fr√•gor √∂verv√§ldigar anv√§ndaren och minskar svarsfrekvensen
2. Fr√•gan m√•ste vara besvarbar p√• 1-2 meningar - undvik komplexa flerdelade fr√•gor
3. Fokusprogression - varje fr√•ga ska bygga naturligt p√• f√∂reg√•ende svar
4. Tydlig avsikt - anv√§ndaren ska f√∂rst√• varf√∂r denna specifika fr√•ga √§r viktig f√∂r rekryteringsanalysen

KONVERSATIONSTEMPO:
- St√§ll EN fokuserad fr√•ga
- V√§nta p√• svar
- Anv√§nd svaret f√∂r att informera n√§sta strategiska fr√•ga
- Bygg f√∂rst√•else progressivt ist√§llet f√∂r informationsdumpning

EXEMPEL P√Ö STRATEGISKA FR√ÖGOR:
‚ùå D√•ligt: "Hur p√•verkar det er s√§ljorganisation?"
‚úÖ Bra: "Vilka av era s√§ljare har redan b√∂rjat fr√•ga om nya jobb?"

‚ùå D√•ligt: "Vad h√§nder med skalbarhet?"
‚úÖ Bra: "Vilka specifika kunder har uttryckt oro √∂ver er s√§ljledning?"

‚ùå D√•ligt: "Hur p√•verkar detta er tekniska skuld?"
‚úÖ Bra: "Vad sa styrelsen n√§r de fick h√∂ra om situationen?"

EXEMPEL P√Ö FR√ÖGEKVALITET:
‚ùå D√•ligt: "Vad ser ni som den st√∂rsta utmaningen med att er nuvarande s√§ljchef l√§mnar? Hur p√•verkar det er s√§ljorganisation? Vad h√§nder med er skalbarhet?"
‚úÖ Bra: "Vad ser ni som den st√∂rsta utmaningen med att er nuvarande s√§ljchef l√§mnar?"

‚ùå D√•ligt: "Ber√§tta om era finansiella utmaningar, hur p√•verkar det er rapportering, och vilka compliance-risker finns?"
‚úÖ Bra: "Vilka specifika finansiella utmaningar har ni just nu?"

KONVERSATIONSSTIL:
- Prata naturligt och direkt, som en erfaren kollega
- Anv√§nd korta, konkreta fr√•gor som fokuserar p√• intern information
- Undvik formella √∂verg√•ngar och sammanfattningar
- Bekr√§fta kort och g√• vidare med strategiska f√∂ljdfr√•gor
- St√§ll f√∂ljdfr√•gor f√∂r att f√∂rst√• helheten
- H√•ll stycken korta och naturliga
- EN ENDA fokuserad fr√•ga per svar
- Varje fr√•ga ska vara besvarbar p√• 1-2 meningar
- Bygg f√∂rst√•else progressivt, inte informationsdumpning

EXEMPEL P√Ö NATURLIG KONVERSATION:
‚ùå Undvik: "L√•t mig sammanfatta f√∂r att s√§kerst√§lla att jag f√∂rst√•tt korrekt. Baserat p√• er information verkar ni ha utmaningar med..."
‚úÖ Anv√§nd: "Okej, s√• ni beh√∂ver n√•gon med enterprise-erfarenhet. Vad kostar det er att sakna denna person?"

‚ùå Undvik: "Kan du kvantifiera den ekonomiska p√•verkan av detta problem?"
‚úÖ Anv√§nd: "Vad kostar det er?"

‚ùå Undvik: "F√∂r att b√§ttre f√∂rst√• situationen, skulle du kunna beskriva..."
‚úÖ Anv√§nd: "Ber√§tta mer om..."

FAS√ñVERG√ÖNG:
Du kommer att f√• information om n√§r anv√§ndaren har tillr√§ckligt med information f√∂r att g√• vidare.
N√§r du f√•r "PHASE_STATUS: READY_FOR_PROGRESSION" - f√∂resl√• att g√• vidare till n√§sta fas ist√§llet f√∂r att st√§lla fler fr√•gor.

N√§r fasen √§r redo f√∂r progression, s√§g:
"Vi har nu samlat tillr√§cklig information om [fasnamn]. √Ñr du redo att g√• vidare till n√§sta fas d√§r vi kommer att utforska [n√§sta fas]?"

STOPPA H√ÑR - st√§ll inga fler fr√•gor efter detta meddelande. V√§nta p√• anv√§ndarens val.`;

// Simple message interface that matches Arena's ConversationMessage
interface SimpleMessage {
	role: "assistant" | "user";
	content: string;
}

interface RequestBody {
	messages: SimpleMessage[];
	currentCluster?: string;
	clusterProgress?: {
		confidence: number;
		collectedInfo: string[];
		status: string;
	};
	canProgressToNext?: boolean;
}

// M2 Step 1: Server-authoritative analysis response
interface ChatResponsePayload {
    message: string;
    roleContext: { role: string; seniority: string; department: string };
    analysis: {
        confidence: number;
        quality: 'low' | 'medium' | 'high';
        categoriesCovered: number;
        missingInsights: string[];
    };
    quickResponses: string[];
    canProgressToNext: boolean;
}

export async function POST(req: NextRequest) {
	try {
		console.log("üîç API - Starting /api/arena/chat request");
		
    const body = (await req.json()) as Partial<RequestBody> | null;
    try {
      console.log("üîç API - Request body (keys):", body ? Object.keys(body) : null);
      console.log("üîç API - Messages length:", Array.isArray(body?.messages) ? body!.messages!.length : null);
      console.log("üîç API - currentCluster:", body?.currentCluster);
      console.log("üîç API - canProgressToNext:", body?.canProgressToNext);
    } catch {}
		
		if (!body || !Array.isArray(body.messages) || body.messages.length === 0) {
			console.log("üîç API - Error: Invalid request body");
			return NextResponse.json({ message: "", error: "Invalid request: messages required" }, { status: 400 });
		}

    // Validate messages structure
    const sanitizedMessages = body.messages
      .filter(m => m && (m.role === "user" || m.role === "assistant") && typeof m.content === "string")
      .map(m => ({ role: m.role!, content: (m.content || "").toString() }));

    if (sanitizedMessages.length === 0) {
      console.log("üîç API - Error: No valid messages after sanitization");
      return NextResponse.json({ message: "", error: "Invalid messages format" }, { status: 400 });
    }

    const last = sanitizedMessages[sanitizedMessages.length - 1];
		if (!last || last.role !== "user" || !last.content?.trim()) {
			console.log("üîç API - Error: Last message invalid");
			return NextResponse.json({ message: "", error: "Last message must be from user with content" }, { status: 400 });
		}

		console.log("üîç API - Calling chatWithClaude...");
		
		// Detect role context for role-aware responses
		const roleContext = detectRoleContext(sanitizedMessages);
		console.log("üîç API - Role context detected:", roleContext);
		
		// Build dynamic system prompt based on completion status and role context
		let dynamicSystemPrompt = SYSTEM_PROMPT;
		
		// Add role-specific context to system prompt
		if (roleContext.role !== 'default') {
			dynamicSystemPrompt += `\n\nROLLSPECIFIK KONTEXT:
Du hj√§lper med rekrytering av en ${roleContext.role.toUpperCase()} (${roleContext.seniority} niv√•).
Fokusera p√• ${roleContext.department}-specifika utmaningar och anv√§nd relevant terminologi.
St√§ll fr√•gor som √§r relevanta f√∂r denna rolltyp.`;
		}
		// Log payload size to catch oversized requests
		try {
			const approxBytes = JSON.stringify(body).length;
			console.log("üîç API - Approx payload bytes:", approxBytes);
		} catch {}
		
    if (body.canProgressToNext && body.currentCluster) {
			const clusterNames: Record<string, string> = {
				'pain-point': 'Problem & Pain Point',
				'impact-urgency': 'Impact & Urgency', 
				'success-criteria': 'Success Criteria',
				'resources-budget': 'Resources & Budget',
				'organization-culture': 'Organization & Culture',
				'alternatives-risks': 'Alternatives & Risks'
			};
			
			const nextClusterNames: Record<string, string> = {
				'pain-point': 'Impact & Urgency',
				'impact-urgency': 'Success Criteria',
				'success-criteria': 'Resources & Budget', 
				'resources-budget': 'Organization & Culture',
				'organization-culture': 'Alternatives & Risks',
				'alternatives-risks': 'slutrapporten'
			};
			
			const currentPhaseName = clusterNames[body.currentCluster] || body.currentCluster;
			const nextPhaseName = nextClusterNames[body.currentCluster] || 'n√§sta fas';
			
      const phaseStatusMessage = `\n\nPHASE_STATUS: READY_FOR_PROGRESSION (Current: ${currentPhaseName} -> Next: ${nextPhaseName}; confidence=${body.clusterProgress?.confidence || 0}%)`;
			
			dynamicSystemPrompt += phaseStatusMessage;
			console.log("üîç API - Added phase completion status to system prompt");
		}
		
    // Limit context to last 10 messages to keep payload small
    const recent = sanitizedMessages.slice(-10);
    console.log("üîç API - Using recent messages:", recent.length);

    // Convert simple messages to ChatMessage format for claude-client
    const chatMessages = recent.map(msg => ({
      role: msg.role as "user" | "assistant",
      content: msg.content,
      timestamp: new Date().toISOString()
    }));

    let text = "";
    try {
      const result = await chatWithClaude(chatMessages, dynamicSystemPrompt);
      text = result.text;
      
      // Enhance response with strategic questioning (SPIN + Challenger) if needed
        if (roleContext.role !== 'default' && body.currentCluster && !body.canProgressToNext) {
        // Determine if we should use Challenger insights or strategic questions
        const shouldUseChallenger = Math.random() < 0.3; // 30% chance to use Challenger insights
        
        if (shouldUseChallenger) {
          // Use Challenger Sale methodology to challenge assumptions
          const challengerInsight = getChallengerInsight(roleContext, body.currentCluster as any, sanitizedMessages);
          console.log("üîç API - Challenger insight generated:", challengerInsight);
          
          // If the response is generic, enhance it with Challenger insight
          if (text.length < 100 || !text.includes(roleContext.department)) {
            text = `${text}\n\n${challengerInsight}`;
          }
        } else {
          // Use strategic SPIN questions focused on confidential information
          const strategicQuestion = getRoleAwareQuestion(body.currentCluster as any, roleContext, []);
          console.log("üîç API - Strategic question generated:", strategicQuestion);
          
          // If the response is generic, enhance it with strategic question
          if (text.length < 100 || !text.includes(roleContext.department)) {
            text = `${text}\n\n${strategicQuestion}`;
          }
        }
        
        // Post-process to ensure only one question is asked
        const questionMarks = (text.match(/\?/g) || []).length;
        if (questionMarks > 1) {
          console.log("üîç API - Multiple questions detected, keeping only the first one");
          const firstQuestionEnd = text.indexOf('?') + 1;
          text = text.substring(0, firstQuestionEnd);
        }
      }
      
    } catch (err: any) {
      console.error("‚ùå API - Claude call failed:", err?.message);
      return NextResponse.json({ message: "", error: err?.message || "Claude failed" }, { status: 502 });
    }
		console.log("üîç API - Claude response length:", text?.length || 0);
		
        // Generate quick response suggestions using role context and exact question
        let quickResponses: string[] = [];
        if (roleContext.role !== 'default' && body.currentCluster) {
            quickResponses = await generateQuickResponseSuggestions(
                roleContext,
                body.currentCluster as any,
                // Pass the last assistant question (text) to ensure relevance
                text,
                sanitizedMessages as any
            );
            console.log("üîç API - Quick response suggestions generated:", quickResponses);
        }

        // Compute cumulative server-side analysis using entire conversation
        const currentCluster = (body.currentCluster || 'pain-point') as any;
        const lastUserMessage = last.content;

        // Previous confidence from client state (if provided)
        const prevConfidence = Math.max(0, Math.round(body.clusterProgress?.confidence || 0));
        console.log('üîç API - CUMULATIVE: prevConfidence =', prevConfidence);

        // Analyze only the NEW information from the last user message
        const msgAnalysis = analyzeMessage(lastUserMessage, currentCluster, roleContext as any);
        const qa = analyzeUniversalQuality(lastUserMessage, lastUserMessage.toLowerCase());

        // Derive a reasonable incremental confidence from the message analysis
        // Use a fraction of the per-message confidence, scaled by novelty proxy (categoriesCovered)
        const noveltyFactor = Math.max(1, qa.categoriesCovered); // 1..6
        const incremental = Math.round(Math.min(15, (msgAnalysis.confidence / 3) + (noveltyFactor * 1.5)));
        console.log('üîç API - CUMULATIVE: msgAnalysis.confidence =', msgAnalysis.confidence);
        console.log('üîç API - CUMULATIVE: qa.categoriesCovered =', qa.categoriesCovered);
        console.log('üîç API - CUMULATIVE: incremental added =', incremental);

        // Role-specific cap
        const roleCap = ROLE_COMPLETION_THRESHOLDS[roleContext.seniority]?.[roleContext.department] ?? 80;

        // Cumulative total; never decrease
        let cumulativeConfidence = prevConfidence + incremental;
        if (cumulativeConfidence < prevConfidence) cumulativeConfidence = prevConfidence;
        cumulativeConfidence = Math.min(cumulativeConfidence, roleCap);
        console.log('üîç API - CUMULATIVE: roleCap =', roleCap);
        console.log('üîç API - CUMULATIVE: final cumulativeConfidence =', cumulativeConfidence);

        // Phase completion (server-side)
        const serverCanProgress = body.clusterProgress
            ? checkClusterCompletion(body.clusterProgress as any, currentCluster)
            : false;

        const payload: ChatResponsePayload = {
            message: text ?? "",
            roleContext: {
                role: roleContext.role,
                seniority: roleContext.seniority,
                department: roleContext.department
            },
            analysis: {
                // Return cumulative confidence instead of per-message
                confidence: cumulativeConfidence,
                quality: msgAnalysis.quality,
                categoriesCovered: qa.categoriesCovered,
                missingInsights: msgAnalysis.missingInfo
            },
            quickResponses,
            canProgressToNext: !!serverCanProgress
        };

        console.log("üîç API - Structured response payload:", payload);

        // Backward compatible: older clients read { message, quickResponses }
        return NextResponse.json(payload, { status: 200 });
	} catch (error) {
		console.error("üîç API - Error details:", error);
		console.error("üîç API - Error stack:", error instanceof Error ? error.stack : "No stack trace");
		return NextResponse.json({ 
			message: "", 
			error: error instanceof Error ? error.message : "Internal server error" 
		}, { status: 500 });
	}
}
